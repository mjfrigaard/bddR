[{"path":"https://mjfrigaard.github.io/pickler/articles/start.html","id":"motivation","dir":"Articles","previous_headings":"","what":"Motivation","title":"Getting started","text":"pickler motivated latest recommendation testthat authors moving test scope within test (.e., remove reduce need code outside call test_that()).  avoid code outside test_that(): Move file-scope logic either narrower scope (just test) broader scope (files) ’s ok copy paste: test code doesn’t super dry. Obvious >> DRY - Package Development Masterclass, posit::conf(2023)  Adopting test fixtures, helpers, setup files address first item list , pickler mostly focused second item: making tests obvious clear.","code":""},{"path":"https://mjfrigaard.github.io/pickler/articles/start.html","id":"behavior-driven-development-functions","dir":"Articles","previous_headings":"","what":"Behavior-driven development functions","title":"Getting started","text":"behavior-driven development (BDD) functions excellent additions suite testing tools provided testthat. work like : great thing describe() can nested: () call essentially identical test_that(), allows longer character string description.","code":"describe(description = \"verify that you implement the right things\", code = {   it(description = \"ensure you do the things right\", code = {     expect_true(TRUE)   }) }) #> Test passed describe(description = \"decribe the right way to implement thing\", code = {   describe(description = \"verify that you implemented the right thing\", code = {     it(description = \"ensure you do the thing right\", code = {       expect_true(TRUE)     })   }) }) #> Test passed"},{"path":"https://mjfrigaard.github.io/pickler/articles/start.html","id":"what-to-test","dir":"Articles","previous_headings":"","what":"What to test","title":"Getting started","text":"Strive test behaviour one one test. behaviour later changes need update single test - test, R Packages, 2ed  pickler attempts address advice providing set Gherkin-style syntax functions can placed description argument decribe() (). three primary functions pickler feature(), scenario(), background(). following sections walk example split_cols() function. can view source code function , now ’ll just look ’s arguments problem solves: Given input_data data : split_cols() generate : split_cols() written tidyr::separate() didn’t easy solution, wanted reduce number keystrokes/neurons/dependencies/etc solve problem.","code":"split_cols(   data,    col,    pattern = \"[^[:alnum:]]+\",    col_prefix = \"col\") input_data #>   id                name #> 1  1               First #> 2  2         First, Last #> 3  3 First, Middle, Last #>   id                name col_1  col_2 col_3 #> 1  1               First First   <NA>  <NA> #> 2  2         First, Last First   Last  <NA> #> 3  3 First, Middle, Last First Middle  Last tidyr::separate(data = input_data,                       col = \"name\",                       into = c(\"col_1\", \"col_2\", \"col_3\"),                       remove = FALSE,                      extra = \"merge\",                       fill = \"right\") #>   id                name col_1  col_2 col_3 #> 1  1               First First   <NA>  <NA> #> 2  2         First, Last First   Last  <NA> #> 3  3 First, Middle, Last First Middle  Last"},{"path":"https://mjfrigaard.github.io/pickler/articles/start.html","id":"features","dir":"Articles","previous_headings":"","what":"Features","title":"Getting started","text":"Features units functionality ’re trying deliver. can adapt language testthat’s BDD functions Gherkin-style feature: Features following keywords: feature start mental model problem ’d like solve. Gherkin-style example split_cols() might look something like : goal feature clearly state objective functionality ’re trying achieve. arguments feature() match Gherkin feature keywords: pattern similar pickler functions, ’ve converted keywords snake_case align tidyverse naming conventions). pickler’s function arguments also serve prompts fill keyword: might wondering ypu’d bother passing information function just include language-agnostic fenced code block: picker’s functions designed work R Markdown testthat tests. example, code blocks pickler functions can set eval=TRUE, echo=FALSE, comment=\"\" render nicely formatted Gherkin syntax file knitted:","code":"Feature: My function's feature   As a user of this function   I want to verify that I implemented the right thing   So that I can ensure I did the thing right Feature: <title>   As a <person using the code>   I want <some action>   So that <desired behavior> Feature: Split a single column into multiple columns using a pattern   As an analyst    I want to specify a column and a pattern    So that I can quickly generate multiple columns. feature(     title = ,     as_a = ,     i_want = ,     so_that =    ) feature(     title = \"Split a single column into multiple columns using a pattern\",     as_a = \"user of split_cols()\",     i_want = \"to specify a column and a pattern\",     so_that = \"I can quickly generate multiple columns.\"   ) ``` Feature: Split a single column into multiple columns using a pattern   As an analyst    I want to specify a column and a pattern    So that I can quickly generate multiple columns. ``` Feature: Split a single column into multiple columns using a pattern   As a user of split_cols()   I want to specify a column and a pattern   So that I can quickly generate multiple columns."},{"path":"https://mjfrigaard.github.io/pickler/articles/start.html","id":"scenarios","dir":"Articles","previous_headings":"","what":"Scenarios","title":"Getting started","text":"Examples cornerstone behavior-driven development testing. Captured scenarios, illustrate concrete example code behave. Scenarios also great communicating documenting requirements, code, tests stakeholders non-technical audiences:  “Examples play primary role BDD, simply ’re extremely effective way communicating clear, precise, unambiguous requirements. Specifications written natural language , turns , terribly poor way communicating requirements, ’s much space ambiguity, assumptions, misunderstandings. Examples great way overcome limitations clarify requirements. Examples also great way explore expand knowledge.” - BDD Action, John Ferguson Smart  Consider scenario() split_cols(): also add function arguments (square brackets), optional. rendered, scenario look like :","code":"scenario(     title = \"Split column with a default pattern\",     given = \"a dataframe with a specified column\",     when = \"I split the column using the default pattern\",     then = \"the column should be split into multiple columns\"   ) scenario(     title = \"Split column with a default pattern\",     given = \"a dataframe [data] with a specified column [col]\",     when = \"I split the [col] column using the default [[^[:alnum:]]+]\",     then = \"the [col] column should be split into multiple columns\"   ) Scenario: Split column with a default pattern   Given a dataframe [data] with a specified column [col]   When I split the [col] column using the default [[^[:alnum:]]+]   Then the [col] column should be split into multiple columns"},{"path":"https://mjfrigaard.github.io/pickler/articles/start.html","id":"and","dir":"Articles","previous_headings":"Scenarios","what":"And","title":"Getting started","text":"Scenarios can also include additional statements keyword test multiple behaviors: Gherkin scenarios occasionally include keywords directly following Given statement, pickler information placed background():","code":"scenario(     title = \"Split column with a default pattern\",     given = \"a dataframe [data] with a specified column [col]\",     when = \"I split the [col] column using the default [[^[:alnum:]]+]\",     then = \"the [col] column should be split into multiple columns\",     and = \"the new columns should be named with the default prefix [cols_]\"   )"},{"path":"https://mjfrigaard.github.io/pickler/articles/start.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Getting started","text":"background() can used provide context preexisting conditions (state world) ’re contending . background() can also used reduce repetitive information scenarios. example, consider two scenarios : scenarios lot duplicated lines–specifically, three: can place background() remove repetition ‘set stage’ future scenarios: nice thing storing additional context background() ’ll update information single location. rendered, background() looks like :","code":"Scenario: Split column with 'default' pattern     Given a dataframe with text data     And a specified column \"<column_name>\"     When I split the column with the default pattern     And a column prefix \"<col_prefix>\"     Then the column should be split into multiple columns     And the resulting dataframe should have the original data with added split columns     And the new columns should have names with the provided prefix and an index    Scenario: Split column with 'custom' pattern     Given a dataframe with text data     And a specified column \"<column_name>\"     When I split the column with a custom pattern \"<pattern>\"     And a column prefix \"<col_prefix>\"     Then the column should be split according to the custom pattern     And the resulting dataframe should have the original data with added split columns     And the new columns should have names with the provided prefix and an index Given a dataframe with text data And a specified column \"<column_name>\" And a column prefix \"<col_prefix>\" background(     title = \"Input dataframe with text data\",      given = \"a dataframe [data] with text columns\",      and = list(                \"a column prefix [cols_]\",                 \"a specified column [col]\")) Background: Input dataframe with text data   Given a dataframe [data] with text columns   And a column prefix [cols_]   And a specified column [col]"},{"path":"https://mjfrigaard.github.io/pickler/articles/start.html","id":"tests","dir":"Articles","previous_headings":"","what":"Tests","title":"Getting started","text":"BDD tests written communicate context, intended behavior, series use cases code used. pickler functions help facilitate can placed nested calls describe() (). example feature(), background(), scenario() split_cols(): BDD tests take longer write, tradeoff obvious: losses brevity gained clarity. emphasis using plain language makes easier stakeholders collaborators understand code works (’s tested). pickler functions can also placed desc argument test_that() test, sometimes multiline descriptions can cause errors.:","code":"describe(   feature(     title = \"Split a single column into multiple columns using a pattern\",     as_a = \"user of split_cols()\",     i_want = \"to specify a column and a pattern\",     so_that = \"I can quickly generate multiple columns.\"   ), code = {          describe(       background(         title = \"Input dataframe with text data\",          given = \"a dataframe [data] with text columns\",          and = list(                    \"a column prefix [cols_]\",                     \"a specified column [col]\")), code = {          it(       scenario(         title = \"Split column with a default pattern\",         given = \"a dataframe [data] with a specified column [col]\",         when = \"I split the [col] column using the default [[^[:alnum:]]+]\",         then = \"the [col] column should be split into multiple columns\"       ), code = {              expect_true(TRUE)            })      })      }) #> Test passed test_that(   feature(     title = \"My function's feature\",     as_a = \"user of this function\",     i_want = \"to verify that I implemented the right thing\",     so_that = \"to ensure I did the thing right\"   ),   code = {     expect_true(TRUE)   } ) #> Test passed"},{"path":"https://mjfrigaard.github.io/pickler/articles/start.html","id":"bundling","dir":"Articles","previous_headings":"","what":"Bundling","title":"Getting started","text":"Ideally, pickler’s functions developed independently wrapped bundle() passing testthat BDD functions: Bundling makes easier combine features backgrounds single call: bundle() also allows us pass feature() background() describe(), test particular scenario() ():","code":"bundle(   feature(     title = \"Split a single column into multiple columns using a pattern\",     as_a = \"user of split_cols()\",     i_want = \"to specify a column and a pattern\",     so_that = \"I can quickly generate multiple columns.\"   ),   background(     title = \"Input dataframe with text data\",      given = \"a dataframe [data] with text columns\",      and = list(                \"a column prefix [cols_]\",                 \"a specified column [col]\")) ) Feature: Split a single column into multiple columns using a pattern   As a user of split_cols()   I want to specify a column and a pattern   So that I can quickly generate multiple columns. Background: Input dataframe with text data   Given a dataframe [data] with text columns   And a column prefix [cols_]   And a specified column [col] describe(   # bundle feature and background   bundle(   feature(     title = \"Split a single column into multiple columns using a pattern\",     as_a = \"user of split_cols()\",     i_want = \"to specify a column and a pattern\",     so_that = \"I can quickly generate multiple columns.\"   ),   background(     title = \"Input dataframe with text data\",      given = \"a dataframe [data] with text columns\",      and = list(                \"a column prefix [cols_]\",                 \"a specified column [col]\")) ), code = {     it(     # test scenario 1      scenario(         title = \"Split column with a default pattern\",         given = \"a dataframe [data] with a specified column [col]\",         when = \"I split the [col] column using the default [[^[:alnum:]]+]\",         then = \"the [col] column should be split into multiple columns\"       ), code = {              expect_true(TRUE)            })     it(     # test scenario 2      scenario(         title = \"Split column with a default pattern\",         given = \"a dataframe [data] with a specified column [col]\",         when = \"I split the [col] column using the default [[^[:alnum:]]+]\",         then = \"the new columns should be named with the default prefix [cols_]\"       ), code = {              expect_true(TRUE)            })   }) #> Test passed  #> Test passed"},{"path":"https://mjfrigaard.github.io/pickler/articles/start.html","id":"tables","dir":"Articles","previous_headings":"","what":"Tables","title":"Getting started","text":"’s also possible provide table scenario feature. Let’s assume small example data illustrates example behavior split_cols() function (stored input): can convert input Gherkin-style table using with_table(): with_table() creates slightly modified knitr::kable(format = \"pipe\", align = \"l\") table can include bundle() background feature: makes easier view RMarkdown Quarto files (echo set FALSE comment set \"\") know know output table look like, can include scenario: Now background, feature, scenario (tables) Gherkin-style format can placed R Markdown file nicely rendered stakeholders non-technical audiences: test file contains fully scoped test everything documented: ’s placed test file, passes!","code":"input #>   value                      name #> 1     1                      John #> 2     2               John, Jacob #> 3     3 John, Jacob, Jingleheimer with_table(input) |value |name                      | |------|--------------------------| |1     |John                      | |2     |John, Jacob               | |3     |John, Jacob, Jingleheimer | bundle(   feature(     title = \"Split a single column into multiple columns using a pattern\",     as_a = \"user of split_cols()\",     i_want = \"to specify a column and a pattern\",     so_that = \"I can quickly generate multiple columns.\"   ),   background(     title = \"Input dataframe with text data\",      given = \"a dataframe [data] with text columns\",      and = list(                \"a column prefix [name]\",                 \"a specified column [name]\")),      input = c(\"            |value |name                      |            |------|--------------------------|            |1     |John                      |            |2     |John, Jacob               |            |3     |John, Jacob, Jingleheimer |            \") ) Feature: Split a single column into multiple columns using a pattern   As a user of split_cols()   I want to specify a column and a pattern   So that I can quickly generate multiple columns. Background: Input dataframe with text data   Given a dataframe [data] with text columns   And a column prefix [default]   And a specified column [name]                  |value |name                      |            |------|--------------------------|            |1     |John                      |            |2     |John, Jacob               |            |3     |John, Jacob, Jingleheimer | with_table(output) |value |name                      |col_1 |col_2 |col_3        | |------|--------------------------|------|------|-------------| |1     |John                      |John  |NA    |NA           | |2     |John, Jacob               |John  |Jacob |NA           | |3     |John, Jacob, Jingleheimer |John  |Jacob |Jingleheimer | bundle( scenario(     title = \"Split column with a default pattern\",     given = \"a dataframe [data] with a specified column [name]\",     when = \"I split the [name] column using the default [[^[:alnum:]]+]\",     then = \"Then the [name] column should be split into multiple columns\",     and = \"the new columns should be named with the default prefix [cols_]\"   ), output = c(           \"           |value |name                      |col_1 |col_2 |col_3        |           |------|--------------------------|------|------|-------------|           |1     |John                      |John  |NA    |NA           |           |2     |John, Jacob               |John  |Jacob |NA           |           |3     |John, Jacob, Jingleheimer |John  |Jacob |Jingleheimer |           \") ) Feature: Split a single column into multiple columns using a pattern   As a user of split_cols()   I want to specify a column and a pattern   So that I can quickly generate multiple columns. Background: Input dataframe with text data   Given a dataframe [data] with text columns   And a column prefix [default]   And a specified column [name]                  |value |name                      |            |------|--------------------------|            |1     |John                      |            |2     |John, Jacob               |            |3     |John, Jacob, Jingleheimer |             Scenario: Split column with a default pattern   Given a dataframe [data] with a specified column [name]   When I split the [name] column using the default [[^[:alnum:]]+]   Then the [name] column should be split into multiple columns   And the new columns should be named with the default prefix [cols_]            |value |name                      |col_1 |col_2 |col_3        |           |------|--------------------------|------|------|-------------|           |1     |John                      |John  |NA    |NA           |           |2     |John, Jacob               |John  |Jacob |NA           |           |3     |John, Jacob, Jingleheimer |John  |Jacob |Jingleheimer | describe( bundle(   feature(     title = \"Split a single column into multiple columns using a pattern\",     as_a = \"user of split_cols()\",     i_want = \"to specify a column and a pattern\",     so_that = \"I can quickly generate multiple columns.\"   ),   background(     title = \"Input dataframe with text data\",      given = \"a dataframe [data] with text columns\",      and = list(                \"a column prefix [default]\",                 \"a specified column [name]\")),      input = c(\"            |value |name                      |            |------|--------------------------|            |1     |John                      |            |2     |John, Jacob               |            |3     |John, Jacob, Jingleheimer |            \")), code = {      it(  bundle(   scenario(       title = \"Split column with a default pattern\",       given = \"a dataframe [data] with a specified column [name]\",       when = \"I split the [name] column using the default [[^[:alnum:]]+]\",       then = \"the [name] column should be split into multiple columns\",       and = \"the new columns should be named with the default prefix [cols_]\"   ), output = c(\"           |value |name                      |col_1 |col_2 |col_3        |           |------|--------------------------|------|------|-------------|           |1     |John                      |John  |NA    |NA           |           |2     |John, Jacob               |John  |Jacob |NA           |           |3     |John, Jacob, Jingleheimer |John  |Jacob |Jingleheimer |         \")   ), code = {      # create observed output   observed <- split_cols(data = input, col = 'name')   # compare against output   expect_equal(object = observed, expected = output)    })  }) #> Test passed devtools:::test_active_file() [ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]"},{"path":"https://mjfrigaard.github.io/pickler/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Martin Frigaard. Maintainer.","code":""},{"path":"https://mjfrigaard.github.io/pickler/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Frigaard M (2023). pickler: Write tests using Gherkin-style features, background, scnearios.. R package version 0.1.0, https://github.com/mjfrigaard/pickler, https://mjfrigaard.github.io/pickler/.","code":"@Manual{,   title = {pickler: Write tests using Gherkin-style features, background, and scnearios.},   author = {Martin Frigaard},   year = {2023},   note = {R package version 0.1.0, https://github.com/mjfrigaard/pickler},   url = {https://mjfrigaard.github.io/pickler/}, }"},{"path":"https://mjfrigaard.github.io/pickler/index.html","id":"pickler-","dir":"","previous_headings":"","what":"Write tests using Gherkin-style features, background, and scnearios.","title":"Write tests using Gherkin-style features, background, and scnearios.","text":"goal pickler provide Gherkin syntax helpers testthat’s describe() () functions.","code":""},{"path":"https://mjfrigaard.github.io/pickler/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Write tests using Gherkin-style features, background, and scnearios.","text":"can install development version pickler GitHub :","code":"# install.packages(\"pak\") pak::pak(\"mjfrigaard/pickler\") library(pickler) if (!require(pak)) {   install.packages(\"pak\",     repos = \"http://cran.us.r-project.org\"   ) } #> Loading required package: pak pak::pkg_install(\"r-lib/testthat\", upgrade = TRUE, ask = FALSE) #> ℹ Loading metadata database #> ✔ Loading metadata database ... done #>   #> ℹ No downloads are needed #> ✔ 1 pkg + 32 deps: kept 33 [7.8s] library(testthat)"},{"path":"https://mjfrigaard.github.io/pickler/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Write tests using Gherkin-style features, background, and scnearios.","text":"testthat’s BDD functions allow explicit descriptions tests: pickler provides set helpers writing Gherkin-style features, backgrounds scenarios can placed describe() (): pickler functions can also can dropped desc argument test_that(): Check Getting Started vignette learn .","code":"describe(description = \"verify that you implement the right things\", code = {   it(description = \"ensure you do the things right\", code = {     expect_true(TRUE)   }) }) #> Test passed describe(   feature(     title = \"My thing's feature\",     as_a = \"user of this thing\",     i_want = \"to verify that I implemented the right thing\",     so_that = \"I'm sure I did the thing right\"   ), code = {   it(     scenario(         title = \"Example of using thing\",         given = \"My package is installed and loaded\",         when = \"I do something\",         then = \"the right thing happens\"       ), code = {     expect_true(TRUE)   }) }) #> Test passed test_that(   scenario(         title = \"Example of thing\",         given = \"My package is installed and loaded\",         when = \"I do something\",         then = \"the right thing happens\"       ),   code = {     expect_true(TRUE)   } ) #> Test passed"},{"path":"https://mjfrigaard.github.io/pickler/reference/background.html","id":null,"dir":"Reference","previous_headings":"","what":"BDD background — background","title":"BDD background — background","text":"BDD backgrounds provide context pre-existing conditions features scenarios.","code":""},{"path":"https://mjfrigaard.github.io/pickler/reference/background.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BDD background — background","text":"","code":"background(title, given, ...)"},{"path":"https://mjfrigaard.github.io/pickler/reference/background.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BDD background — background","text":"title Background title given Preconditions scenario/feature. ... additional arguments initial context (provided list())","code":""},{"path":"https://mjfrigaard.github.io/pickler/reference/background.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"BDD background — background","text":"BDD background (based Gherkin syntax)","code":""},{"path":"https://mjfrigaard.github.io/pickler/reference/background.html","id":"technical-details","dir":"Reference","previous_headings":"","what":"Technical details","title":"BDD background — background","text":"Use background() reduce repetitive information scenarios features.","code":""},{"path":[]},{"path":"https://mjfrigaard.github.io/pickler/reference/background.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"BDD background — background","text":"","code":"background(title = \"Launching the application\",            given = \"I have launched the application\") #> Background: Launching the application #>   Given I have launched the application background(title = \"Launching the application\",            given = \"I have launched the application\",            and = \"it contains movie review data from IMDB and Rotten Tomatoes\") #> Background: Launching the application #>   Given I have launched the application #>   And it contains movie review data from IMDB and Rotten Tomatoes background(title = \"Launching the application\",            given = \"I have launched the application\",            and = list(\"it contains movie review data from IMDB and Rotten Tomatoes\",                       \"the data contains variables like 'Critics Score' and 'MPAA'\",                       \"the data contains variables like 'Audience Score' and 'Genre'\")) #> Background: Launching the application #>   Given I have launched the application #>   And it contains movie review data from IMDB and Rotten Tomatoes #>   And the data contains variables like 'Critics Score' and 'MPAA' #>   And the data contains variables like 'Audience Score' and 'Genre' #>"},{"path":"https://mjfrigaard.github.io/pickler/reference/background_build.html","id":null,"dir":"Reference","previous_headings":"","what":"BDD background (build) — background_build","title":"BDD background (build) — background_build","text":"BDD backgrounds listed first scenario(), level indentation.","code":""},{"path":"https://mjfrigaard.github.io/pickler/reference/background_build.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BDD background (build) — background_build","text":"","code":"background_build(title, given, and = NULL)"},{"path":"https://mjfrigaard.github.io/pickler/reference/background_build.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BDD background (build) — background_build","text":"title Background title given Preconditions/initial context Additional '' arguments","code":""},{"path":"https://mjfrigaard.github.io/pickler/reference/background_build.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"BDD background (build) — background_build","text":"BDD background","code":""},{"path":"https://mjfrigaard.github.io/pickler/reference/bundle.html","id":null,"dir":"Reference","previous_headings":"","what":"Bundle BDD functions — bundle","title":"Bundle BDD functions — bundle","text":"Bundle BDD functions","code":""},{"path":"https://mjfrigaard.github.io/pickler/reference/bundle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bundle BDD functions — bundle","text":"","code":"bundle(...)"},{"path":"https://mjfrigaard.github.io/pickler/reference/bundle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bundle BDD functions — bundle","text":"... features, scenarios, background, tables, etc.","code":""},{"path":"https://mjfrigaard.github.io/pickler/reference/bundle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bundle BDD functions — bundle","text":"'bundled' features, scenarios, background, etc. passed tests.","code":""},{"path":"https://mjfrigaard.github.io/pickler/reference/bundle.html","id":"technical-details","dir":"Reference","previous_headings":"","what":"Technical details","title":"Bundle BDD functions — bundle","text":"Items passed bundle() sorted re-packaged list, passed glue::collapse() sep set \\n (newline).","code":""},{"path":"https://mjfrigaard.github.io/pickler/reference/bundle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bundle BDD functions — bundle","text":"","code":"bundle(   feature(     title = \"Visualization\",     as_a = \"user\",     i_want = \"to see the changes in the plot\",     so_that = \"I can visualize the impact of my customizations\"   ),   background(     title = \"Launching the application\",     given = \"I have launched the application\",     and = \"it contains movie review data from IMDB and Rotten Tomatoes\"   ),   scenario(     title = \"Viewing the Data Visualization\",     given = \"I have launched the application\",     when = \"I interact with the sidebar controls\",     then = \"the graph should update with the selected options\"   ) ) #> Feature: Visualization #>   As a user #>   I want to see the changes in the plot #>   So that I can visualize the impact of my customizations #> Background: Launching the application #>   Given I have launched the application #>   And it contains movie review data from IMDB and Rotten Tomatoes #> Scenario: Viewing the Data Visualization #>   Given I have launched the application #>   When I interact with the sidebar controls #>   Then the graph should update with the selected options"},{"path":"https://mjfrigaard.github.io/pickler/reference/check_string.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for string (rlang util) — check_string","title":"Check for string (rlang util) — check_string","text":"Check string (rlang util)","code":""},{"path":"https://mjfrigaard.github.io/pickler/reference/check_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for string (rlang util) — check_string","text":"","code":"check_string(x)"},{"path":"https://mjfrigaard.github.io/pickler/reference/check_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for string (rlang util) — check_string","text":"x input argument","code":""},{"path":"https://mjfrigaard.github.io/pickler/reference/check_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for string (rlang util) — check_string","text":"invisible passes, alert fails","code":""},{"path":"https://mjfrigaard.github.io/pickler/reference/check_string.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for string (rlang util) — check_string","text":"","code":"pickler:::check_string(\"test\") pickler:::check_string(1) #> Error in pickler:::check_string(1): Argument is not string!"},{"path":"https://mjfrigaard.github.io/pickler/reference/feature.html","id":null,"dir":"Reference","previous_headings":"","what":"BDD Feature — feature","title":"BDD Feature — feature","text":"Write test feature.","code":""},{"path":"https://mjfrigaard.github.io/pickler/reference/feature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BDD Feature — feature","text":"","code":"feature(title, as_a, i_want, so_that)"},{"path":"https://mjfrigaard.github.io/pickler/reference/feature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BDD Feature — feature","text":"title feature title as_a \"\" <user/stakeholder> i_want \"want\" so_that \"\"","code":""},{"path":"https://mjfrigaard.github.io/pickler/reference/feature.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"BDD Feature — feature","text":"feature (based Gherkin syntax)","code":""},{"path":"https://mjfrigaard.github.io/pickler/reference/feature.html","id":"technical-details","dir":"Reference","previous_headings":"","what":"Technical details","title":"BDD Feature — feature","text":"contents feature returned 'glue' chr, retain Gherkin-style indentation. can passed testthat's () test_that() testing functions.","code":""},{"path":[]},{"path":"https://mjfrigaard.github.io/pickler/reference/feature.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"BDD Feature — feature","text":"","code":"feature(title = \"Visualization\",         as_a = \"user\",         i_want = \"to see the changes in the plot\",         so_that = \"I can visualize the impact of my customizations\") #> Feature: Visualization #>   As a user #>   I want to see the changes in the plot #>   So that I can visualize the impact of my customizations"},{"path":"https://mjfrigaard.github.io/pickler/reference/feature_build.html","id":null,"dir":"Reference","previous_headings":"","what":"BDD Feature (build) — feature_build","title":"BDD Feature (build) — feature_build","text":"BDD Feature (build)","code":""},{"path":"https://mjfrigaard.github.io/pickler/reference/feature_build.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BDD Feature (build) — feature_build","text":"","code":"feature_build(title, as_a, i_want, so_that)"},{"path":"https://mjfrigaard.github.io/pickler/reference/feature_build.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BDD Feature (build) — feature_build","text":"title feature title as_a \"\" <user/stakeholder> i_want \"want\" so_that \"\"","code":""},{"path":"https://mjfrigaard.github.io/pickler/reference/feature_build.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"BDD Feature (build) — feature_build","text":"feature (based Gherkin syntax)","code":""},{"path":"https://mjfrigaard.github.io/pickler/reference/pivot_string_long.html","id":null,"dir":"Reference","previous_headings":"","what":"Pivot a string into a data.frame (long) — pivot_string_long","title":"Pivot a string into a data.frame (long) — pivot_string_long","text":"function testing pickler.","code":""},{"path":"https://mjfrigaard.github.io/pickler/reference/pivot_string_long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pivot a string into a data.frame (long) — pivot_string_long","text":"","code":"pivot_string_long(string, sep = \"[^[:alnum:]]+\")"},{"path":"https://mjfrigaard.github.io/pickler/reference/pivot_string_long.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pivot a string into a data.frame (long) — pivot_string_long","text":"string character vector. sep separator pattern (set \"[^[:alnum:]]+\")","code":""},{"path":"https://mjfrigaard.github.io/pickler/reference/pivot_string_long.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pivot a string into a data.frame (long) — pivot_string_long","text":"data.frame unique_items term","code":""},{"path":"https://mjfrigaard.github.io/pickler/reference/pivot_string_long.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pivot a string into a data.frame (long) — pivot_string_long","text":"","code":"pivot_string_long(\"A large size in stockings is hard to sell.\") #>   unique_items                                     string #> 1            A A large size in stockings is hard to sell. #> 2        large                                       <NA> #> 3         size                                       <NA> #> 4           in                                       <NA> #> 5    stockings                                       <NA> #> 6           is                                       <NA> #> 7         hard                                       <NA> #> 8           to                                       <NA> #> 9         sell                                       <NA> pivot_string_long(c(\"A large size in stockings is hard to sell.\", \"The first part of the plan needs changing.\" )) #>    unique_items                                     string #> 1             A A large size in stockings is hard to sell. #> 2         large                                       <NA> #> 3          size                                       <NA> #> 4            in                                       <NA> #> 5     stockings                                       <NA> #> 6            is                                       <NA> #> 7          hard                                       <NA> #> 8            to                                       <NA> #> 9          sell                                       <NA> #> 10          The The first part of the plan needs changing. #> 11        first                                       <NA> #> 12         part                                       <NA> #> 13           of                                       <NA> #> 14          the                                       <NA> #> 15         plan                                       <NA> #> 16        needs                                       <NA> #> 17     changing                                       <NA>"},{"path":"https://mjfrigaard.github.io/pickler/reference/process_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Process names and text in dataset — process_text","title":"Process names and text in dataset — process_text","text":"function testing pickler.","code":""},{"path":"https://mjfrigaard.github.io/pickler/reference/process_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process names and text in dataset — process_text","text":"","code":"process_text(raw_data, fct = FALSE)"},{"path":"https://mjfrigaard.github.io/pickler/reference/process_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process names and text in dataset — process_text","text":"fct convert factors lowercase? TRUE, factors returned character .data data.frame, tibble, data.table","code":""},{"path":"https://mjfrigaard.github.io/pickler/reference/process_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process names and text in dataset — process_text","text":"processed dataset","code":""},{"path":"https://mjfrigaard.github.io/pickler/reference/process_text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process names and text in dataset — process_text","text":"","code":"str(process_text(datasets::CO2)) #> 'data.frame':\t84 obs. of  5 variables: #>  $ plant    : Ord.factor w/ 12 levels \"Qn1\"<\"Qn2\"<\"Qn3\"<..: 1 1 1 1 1 1 1 2 2 2 ... #>  $ type     : Factor w/ 2 levels \"Quebec\",\"Mississippi\": 1 1 1 1 1 1 1 1 1 1 ... #>  $ treatment: Factor w/ 2 levels \"nonchilled\",\"chilled\": 1 1 1 1 1 1 1 1 1 1 ... #>  $ conc     : num  95 175 250 350 500 675 1000 95 175 250 ... #>  $ uptake   : num  16 30.4 34.8 37.2 35.3 39.2 39.7 13.6 27.3 37.1 ... #>  - attr(*, \"formula\")=Class 'formula'  language uptake ~ conc | Plant #>   .. ..- attr(*, \".Environment\")=<environment: R_EmptyEnv>  #>  - attr(*, \"outer\")=Class 'formula'  language ~Treatment * Type #>   .. ..- attr(*, \".Environment\")=<environment: R_EmptyEnv>  #>  - attr(*, \"labels\")=List of 2 #>   ..$ x: chr \"Ambient carbon dioxide concentration\" #>   ..$ y: chr \"CO2 uptake rate\" #>  - attr(*, \"units\")=List of 2 #>   ..$ x: chr \"(uL/L)\" #>   ..$ y: chr \"(umol/m^2 s)\" str(process_text(datasets::CO2, fct = TRUE)) #> 'data.frame':\t84 obs. of  5 variables: #>  $ plant    : chr  \"qn1\" \"qn1\" \"qn1\" \"qn1\" ... #>  $ type     : chr  \"quebec\" \"quebec\" \"quebec\" \"quebec\" ... #>  $ treatment: chr  \"nonchilled\" \"nonchilled\" \"nonchilled\" \"nonchilled\" ... #>  $ conc     : num  95 175 250 350 500 675 1000 95 175 250 ... #>  $ uptake   : num  16 30.4 34.8 37.2 35.3 39.2 39.7 13.6 27.3 37.1 ... #>  - attr(*, \"formula\")=Class 'formula'  language uptake ~ conc | Plant #>   .. ..- attr(*, \".Environment\")=<environment: R_EmptyEnv>  #>  - attr(*, \"outer\")=Class 'formula'  language ~Treatment * Type #>   .. ..- attr(*, \".Environment\")=<environment: R_EmptyEnv>  #>  - attr(*, \"labels\")=List of 2 #>   ..$ x: chr \"Ambient carbon dioxide concentration\" #>   ..$ y: chr \"CO2 uptake rate\" #>  - attr(*, \"units\")=List of 2 #>   ..$ x: chr \"(uL/L)\" #>   ..$ y: chr \"(umol/m^2 s)\""},{"path":"https://mjfrigaard.github.io/pickler/reference/rev_string.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse strings (function for testing) — rev_string","title":"Reverse strings (function for testing) — rev_string","text":"function testing pickler.","code":""},{"path":"https://mjfrigaard.github.io/pickler/reference/rev_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse strings (function for testing) — rev_string","text":"","code":"rev_string(string)"},{"path":"https://mjfrigaard.github.io/pickler/reference/rev_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse strings (function for testing) — rev_string","text":"string string","code":""},{"path":"https://mjfrigaard.github.io/pickler/reference/rev_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverse strings (function for testing) — rev_string","text":"reversed string","code":""},{"path":"https://mjfrigaard.github.io/pickler/reference/rev_string.html","id":"more-info","dir":"Reference","previous_headings":"","what":"More info","title":"Reverse strings (function for testing) — rev_string","text":"original code function StackOverflow post. included uses deparse(substitute()) assign() (makes interesting tests).","code":""},{"path":"https://mjfrigaard.github.io/pickler/reference/rev_string.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse strings (function for testing) — rev_string","text":"","code":"## NOT RUN # a <- \"StackOverFlow\" # rev_string(a) # a"},{"path":"https://mjfrigaard.github.io/pickler/reference/scenario.html","id":null,"dir":"Reference","previous_headings":"","what":"BDD scenario — scenario","title":"BDD scenario — scenario","text":"Scenarios illustrate concrete example specific behavior.","code":""},{"path":"https://mjfrigaard.github.io/pickler/reference/scenario.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BDD scenario — scenario","text":"","code":"scenario(title, given, when, then, and = NULL)"},{"path":"https://mjfrigaard.github.io/pickler/reference/scenario.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BDD scenario — scenario","text":"title Scenario title given Preconditions initial context action occurs expected outcome behavior additional '' arguments","code":""},{"path":"https://mjfrigaard.github.io/pickler/reference/scenario.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"BDD scenario — scenario","text":"scenario (based Gherkin syntax)","code":""},{"path":"https://mjfrigaard.github.io/pickler/reference/scenario.html","id":"keywords","dir":"Reference","previous_headings":"","what":"Keywords","title":"BDD scenario — scenario","text":"Scenarios include 'Given', '', '' keywords (sometimes additional '' statements).","code":""},{"path":[]},{"path":"https://mjfrigaard.github.io/pickler/reference/scenario.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"BDD scenario — scenario","text":"","code":"scenario(     title = \"Split column with a default pattern\",     given = \"a dataframe with a specified column [name]\",     when = \"I split the [name] column using the default [pattern]\",     then = \"Then the [name] column should be split into multiple columns\",     and = \"the new columns should be named with the default prefix [cols]\"   ) #> Scenario: Split column with a default pattern #>   Given a dataframe with a specified column [name] #>   When I split the [name] column using the default [pattern] #>   Then Then the [name] column should be split into multiple columns #>   And the new columns should be named with the default prefix [cols]"},{"path":"https://mjfrigaard.github.io/pickler/reference/scenario_build.html","id":null,"dir":"Reference","previous_headings":"","what":"BDD scenario (build) — scenario_build","title":"BDD scenario (build) — scenario_build","text":"BDD scenario (build)","code":""},{"path":"https://mjfrigaard.github.io/pickler/reference/scenario_build.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BDD scenario (build) — scenario_build","text":"","code":"scenario_build(title, given, when, then, and = NULL)"},{"path":"https://mjfrigaard.github.io/pickler/reference/scenario_build.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BDD scenario (build) — scenario_build","text":"title Scenario title given initial context action occurs expected outcome behavior additional '' arguments","code":""},{"path":"https://mjfrigaard.github.io/pickler/reference/scenario_build.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"BDD scenario (build) — scenario_build","text":"BDD scenario","code":""},{"path":"https://mjfrigaard.github.io/pickler/reference/split_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Split column into multiple columns — split_cols","title":"Split column into multiple columns — split_cols","text":"function testing pickler.","code":""},{"path":"https://mjfrigaard.github.io/pickler/reference/split_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split column into multiple columns — split_cols","text":"","code":"split_cols(data, col, pattern = \"[^[:alnum:]]+\", col_prefix = \"col\")"},{"path":"https://mjfrigaard.github.io/pickler/reference/split_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split column into multiple columns — split_cols","text":"data data.frame tibble col column split pattern regular expression pattern passed strsplit() col_prefix prefix new columns","code":""},{"path":"https://mjfrigaard.github.io/pickler/reference/split_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split column into multiple columns — split_cols","text":"data.frame split columns","code":""},{"path":"https://mjfrigaard.github.io/pickler/reference/split_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split column into multiple columns — split_cols","text":"","code":"d <- data.frame(value = c(29L, 91L, 39L, 28L, 12L),                 name = c(\"John\", \"John, Jacob\",                          \"John, Jacob, Jingleheimer\",                          \"Jingleheimer, Schmidt\",                          \"JJJ, Schmidt\")) split_cols(data = d, col = \"name\", col_prefix = \"names\") #>   value                      name      names_1 names_2      names_3 #> 1    29                      John         John    <NA>         <NA> #> 2    91               John, Jacob         John   Jacob         <NA> #> 3    39 John, Jacob, Jingleheimer         John   Jacob Jingleheimer #> 4    28     Jingleheimer, Schmidt Jingleheimer Schmidt         <NA> #> 5    12              JJJ, Schmidt          JJJ Schmidt         <NA>"},{"path":"https://mjfrigaard.github.io/pickler/reference/with_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Gherkin-style table — with_table","title":"Add Gherkin-style table — with_table","text":"Tables Gherkin essentially markdown tables, wrapper knitr::kable(format = \"pipe\")","code":""},{"path":"https://mjfrigaard.github.io/pickler/reference/with_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Gherkin-style table — with_table","text":"","code":"with_table(tbl)"},{"path":"https://mjfrigaard.github.io/pickler/reference/with_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Gherkin-style table — with_table","text":"tbl data.frame tibble","code":""},{"path":"https://mjfrigaard.github.io/pickler/reference/with_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Gherkin-style table — with_table","text":"table knitr::kable(format = \"pipe\", align = \"l\")","code":""},{"path":"https://mjfrigaard.github.io/pickler/reference/with_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Gherkin-style table — with_table","text":"","code":"# with_table(data.frame(value = c(29L, 91L, 39L, 28L, 12L), #                       name = c(\"John\", \"John, Jacob\", #                                \"John, Jacob, Jingleheimer\", #                                \"Jingleheimer, Schmidt\", #                                \"JJJ, Schmidt\")))"},{"path":"https://mjfrigaard.github.io/pickler/news/index.html","id":"pickler-010","dir":"Changelog","previous_headings":"","what":"pickler 0.1.0","title":"pickler 0.1.0","text":"Add hex logo Initial pkgdown build","code":""}]
