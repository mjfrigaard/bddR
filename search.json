[{"path":"https://mjfrigaard.github.io/bddR/articles/bdd-testthat.html","id":"gherkin","dir":"Articles","previous_headings":"","what":"Gherkin","title":"bdd-testthat","text":"Using Gherkin keywords possible test_that() tests, ’s just lot typing: bddR helper functions writing Gherkin-style features, scenarios, backgrounds. can placed test_that() description: use level indentation Gherkin:","code":"test_that(   \"Feature:       As a user       I want to see the changes in the plot       So that I can visualize the impact of my customizations\",   code = {     expect_true(TRUE)   } )   Test passed test_that(   feature(     title = \"Visualization\",     as_a = \"user\",     i_want = \"to see the changes in the plot\",     so_that = \"I can visualize the impact of my customizations\"   ),   code = {     expect_true(TRUE)   } )   Test passed feature(   title = \"Visualization\",   as_a = \"user\",   i_want = \"to see the changes in the plot\",   so_that = \"I can visualize the impact of my customizations\" )   Feature: Visualization     As a user     I want to see the changes in the plot     So that I can visualize the impact of my customizations background(   title = \"Launching the application\",   given = \"I have launched the application\",   and = list(     \"it contains movie review data from IMDB and Rotten Tomatoes\",     \"the data contains variables like 'Critics Score' and 'MPAA'\",     \"the data contains variables like 'Audience Score' and 'Genre'\"   ) )   Background: Launching the application     Given I have launched the application     And it contains movie review data from IMDB and Rotten Tomatoes     And the data contains variables like 'Critics Score' and 'MPAA'     And the data contains variables like 'Audience Score' and 'Genre'          scenario(   title = \"Viewing the Data Visualization\",   given = \"I have launched the application\",   when = \"I interact with the sidebar controls\",   then = \"the graph should update with the selected options\" )   Scenario: Viewing the Data Visualization     Given I have launched the application     When I interact with the sidebar controls     Then the graph should update with the selected options"},{"path":"https://mjfrigaard.github.io/bddR/articles/bdd-testthat.html","id":"bdd-functions","dir":"Articles","previous_headings":"","what":"BDD functions","title":"bdd-testthat","text":"describe() function can hold combinations features backgrounds: can also bundle() features backgrounds:","code":"describe(   feature(     title = \"Visualization\",     as_a = \"user\",     i_want = \"to see the changes in the plot\",     so_that = \"I can visualize the impact of my customizations\"   ), code = {          describe(       background(         title = \"Launching the application\",         given = \"I have launched the application\",         and = list(           \"it contains movie review data from IMDB and Rotten Tomatoes\",           \"the data contains variables like 'Critics Score' and 'MPAA'\",           \"the data contains variables like 'Audience Score' and 'Genre'\")   ), code = {          it(       scenario(         title = \"Viewing the Data Visualization\",         given = \"I have launched the application\",         when = \"I interact with the sidebar controls\",         then = \"the graph should update with the selected options\"       ), code = {              expect_true(TRUE)            })      })      })   Test passed describe(   bundle(     feature(       title = \"Visualization\",       as_a = \"user\",       i_want = \"to see the changes in the plot\",       so_that = \"I can visualize the impact of my customizations\"   ),     background(       title = \"Launching the application\",       given = \"I have launched the application\",       and = list(         \"it contains movie review data from IMDB and Rotten Tomatoes\",         \"the data contains variables like 'Critics Score' and 'MPAA'\",         \"the data contains variables like 'Audience Score' and 'Genre'\")     ) ), code = {     it(       scenario(         title = \"Viewing the Data Visualization\",         given = \"I have launched the application\",         when = \"I interact with the sidebar controls\",         then = \"the graph should update with the selected options\"       ), code = {              expect_true(TRUE)            })      })   Test passed"},{"path":"https://mjfrigaard.github.io/bddR/articles/bdd-testthat.html","id":"tables","dir":"Articles","previous_headings":"","what":"Tables","title":"bdd-testthat","text":"’s also possible b table scenario feature. Assume ’re testing function, sep_cols_mult(), want provide example data scenario (stored input_data): can convert input_data Gherkin-style table using with_table(): input_data can added bundle() background feature tests sep_cols_mult(), know want output table look like, : ’ll provide example output_data, : ’ll include output_data another bundle() scenario:","code":"input_data #>   value                      name #> 1     1                      John #> 2     2               John, Jacob #> 3     3 John, Jacob, Jingleheimer with_table(input_data) #> |value |name                      | #> |------|--------------------------| #> |1     |John                      | #> |2     |John, Jacob               | #> |3     |John, Jacob, Jingleheimer | bundle(   background(     title = \"Input dataframe with text data\",      given = \"a dataframe with text data\",      and = list(                \"a column prefix\",                 \"a specified column\")), input_data = c(\"                |value |name                      |                |------|--------------------------|                |1     |John                      |                |2     |John, Jacob               |                |3     |John, Jacob, Jingleheimer |                \"),  feature(   title = \"Separate single column into multiple based on pattern\",    as_a = \"user of sep_cols_mult() \",    i_want = \"to specify a separate column and a pattern to separate on\",    so_that = \"a resulting dataframe contains the new separated columns.\") )   Background: Input dataframe with text data     Given a dataframe with text data     And a column prefix     And a specified column                              |value |name                      |                  |------|--------------------------|                  |1     |John                      |                  |2     |John, Jacob               |                  |3     |John, Jacob, Jingleheimer |                     Feature: Separate single column into multiple based on pattern     As a user of sep_cols_mult()      I want to specify a separate column and a pattern to separate on     So that a resulting dataframe contains the new separated columns. scenario(     title = \"Split column with default pattern\",     given = \"a dataframe with specified column [name]\",     when = \"I split the [name] column with the default pattern\",     then = \"the [name] column should be split into multiple columns\"   )   Scenario: Split column with default pattern     Given a dataframe with specified column [name]     When I split the [name] column with the default pattern     Then the [name] column should be split into multiple columns output_data #>   value                      name col_1 col_2        col_3 #> 1     1                      John  John  <NA>         <NA> #> 2     2               John, Jacob  John Jacob         <NA> #> 3     3 John, Jacob, Jingleheimer  John Jacob Jingleheimer with_table(output_data) |value |name                      |col_1 |col_2 |col_3        |   |------|--------------------------|------|------|-------------|   |1     |John                      |John  |NA    |NA           |   |2     |John, Jacob               |John  |Jacob |NA           |   |3     |John, Jacob, Jingleheimer |John  |Jacob |Jingleheimer | bundle( output_data = c(\"                 |value |name                      |col_1 |col_2 |col_3        |                 |------|--------------------------|------|------|-------------|                 |1     |John                      |John  |NA    |NA           |                 |2     |John, Jacob               |John  |Jacob |NA           |                 |3     |John, Jacob, Jingleheimer |John  |Jacob |Jingleheimer |               \") )                      |value |name                      |col_1 |col_2 |col_3        |                   |------|--------------------------|------|------|-------------|                   |1     |John                      |John  |NA    |NA           |                   |2     |John, Jacob               |John  |Jacob |NA           |                   |3     |John, Jacob, Jingleheimer |John  |Jacob |Jingleheimer | bundle(   background(     title = \"Input dataframe with text data\",      given = \"a dataframe with text data\",      and = list(                \"a column prefix\",                 \"a specified column\")), input_data = c(\"                |value |name                      |                |------|--------------------------|                |1     |John                      |                |2     |John, Jacob               |                |3     |John, Jacob, Jingleheimer |                \"), feature(   title = \"Separate single column into multiple based on pattern\",    as_a = \"user of sep_cols_mult() \",    i_want = \"to specify a separate column and a pattern to separate on\",    so_that = \"a resulting dataframe contains the new separated columns.\"),    scenario(     title = \"Split column with default pattern\",     given = \"a dataframe with specified column [name]\",     when = \"I split the [name] column with the default pattern\",     then = \"the [name] column should be split into multiple columns\"   ), output_data = c(\"                 |value |name                      |col_1 |col_2 |col_3        |                 |------|--------------------------|------|------|-------------|                 |1     |John                      |John  |NA    |NA           |                 |2     |John, Jacob               |John  |Jacob |NA           |                 |3     |John, Jacob, Jingleheimer |John  |Jacob |Jingleheimer |               \") )   Background: Input dataframe with text data     Given a dataframe with text data     And a column prefix     And a specified column                              |value |name                      |                  |------|--------------------------|                  |1     |John                      |                  |2     |John, Jacob               |                  |3     |John, Jacob, Jingleheimer |                     Feature: Separate single column into multiple based on pattern     As a user of sep_cols_mult()      I want to specify a separate column and a pattern to separate on     So that a resulting dataframe contains the new separated columns.   Scenario: Split column with default pattern     Given a dataframe with specified column [name]     When I split the [name] column with the default pattern     Then the [name] column should be split into multiple columns                      |value |name                      |col_1 |col_2 |col_3        |                   |------|--------------------------|------|------|-------------|                   |1     |John                      |John  |NA    |NA           |                   |2     |John, Jacob               |John  |Jacob |NA           |                   |3     |John, Jacob, Jingleheimer |John  |Jacob |Jingleheimer | describe( bundle(   background(     title = \"Input dataframe with text data\",      given = \"a dataframe with text data\",      and = list(                \"a column prefix\",                 \"a specified column\")), input_data = c(\"                |value |name                      |                |------|--------------------------|                |1     |John                      |                |2     |John, Jacob               |                |3     |John, Jacob, Jingleheimer |                \"),  feature(   title = \"Separate single column into multiple based on pattern\",    as_a = \"user of sep_cols_mult() \",    i_want = \"to specify a separate column and a pattern to separate on\",    so_that = \"a resulting dataframe contains the new separated columns.\") ), code = {      it( bundle(   scenario(       title = \"Split column with default pattern\",       given = \"a dataframe with specified column [name]\",       when = \"I split the [name] column with the default pattern\",       then = \"the [name] column should be split into multiple columns\"     ),   output_data = c(\"                   |value |name                      |col_1 |col_2 |col_3        |                   |------|--------------------------|------|------|-------------|                   |1     |John                      |John  |NA    |NA           |                   |2     |John, Jacob               |John  |Jacob |NA           |                   |3     |John, Jacob, Jingleheimer |John  |Jacob |Jingleheimer |                 \")   ), code = {      observed <- sep_cols_mult(data = input_data, col = 'name')      expect_equal(object = observed, expected = output_data)    })  })   Test passed"},{"path":"https://mjfrigaard.github.io/bddR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Martin Frigaard. Maintainer.","code":""},{"path":"https://mjfrigaard.github.io/bddR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Frigaard M (2023). bddR: Write Gherkin features, scnearios, background tests.. R package version 0.1.0, https://mjfrigaard.github.io/bddR/.","code":"@Manual{,   title = {bddR: Write Gherkin features, scnearios, and background in tests.},   author = {Martin Frigaard},   year = {2023},   note = {R package version 0.1.0},   url = {https://mjfrigaard.github.io/bddR/}, }"},{"path":"https://mjfrigaard.github.io/bddR/index.html","id":"bddr","dir":"","previous_headings":"","what":"Write Gherkin features, scnearios, and background in tests.","title":"Write Gherkin features, scnearios, and background in tests.","text":"goal bddR provide Gherkin syntax helpers testthat’s describe() () functions.","code":""},{"path":"https://mjfrigaard.github.io/bddR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Write Gherkin features, scnearios, and background in tests.","text":"can install development version bddR GitHub :","code":"# install.packages(\"pak\") pak::pak(\"mjfrigaard/bddR\") library(bddR) if (!require(pak)) {   install.packages(\"pak\",     repos = \"http://cran.us.r-project.org\"   ) } #> Loading required package: pak pak::pkg_install(\"r-lib/testthat\", upgrade = TRUE, ask = FALSE) #> ℹ Loading metadata database #> ✔ Loading metadata database ... done #>   #> ℹ No downloads are needed #> ✔ 1 pkg + 32 deps: kept 33 [8s] library(testthat)"},{"path":"https://mjfrigaard.github.io/bddR/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Write Gherkin features, scnearios, and background in tests.","text":"Adding Gherkin keywords describe() () can tiresome. feature() allows simply fill arguments: returns glue/character string: can dropped test description:","code":"test_that(\"   Feature: Visualization       As a user       I want to see the changes in the plot       So that I can visualize the impact of my customizations   \", code = {   testthat::expect_true(TRUE) }) #> Test passed feature(   title = \"Visualization\",   as_a = \"user\",   i_want = \"to see the changes in the plot\",   so_that = \"I can visualize the impact of my customizations\" ) #> Feature: Visualization #>   As a user #>   I want to see the changes in the plot #>   So that I can visualize the impact of my customizations class(   feature(     title = \"Visualization\",     as_a = \"user\",     i_want = \"to see the changes in the plot\",     so_that = \"I can visualize the impact of my customizations\"   ) ) #> [1] \"glue\"      \"character\" test_that(   feature(     title = \"Visualization\",     as_a = \"user\",     i_want = \"to see the changes in the plot\",     so_that = \"I can visualize the impact of my customizations\"   ),   code = {     expect_true(TRUE)   } ) #> Test passed"},{"path":"https://mjfrigaard.github.io/bddR/index.html","id":"scenarios","dir":"","previous_headings":"","what":"Scenarios","title":"Write Gherkin features, scnearios, and background in tests.","text":"Scenarios title given, , (sometimes ) statements: can add statement background/context: one ? Just drop list():","code":"describe(   feature(     title = \"Visualization\",     as_a = \"user\",     i_want = \"to see the changes in the plot\",     so_that = \"I can visualize the impact of my customizations\"   ),   code = {     testthat::it(\"       Scenario:           given           when           then       \", code = {       testthat::expect_true(TRUE)     })   } ) #> Test passed describe(   feature(     title = \"Visualization\",     as_a = \"user\",     i_want = \"to see the changes in the plot\",     so_that = \"I can visualize the impact of my customizations\"   ),   code = {     it(       scenario(         title = \"Viewing the Data Visualization\",         given = \"I have launched the application\",         when = \"I interact with the sidebar controls\",         then = \"the graph should update with the selected options\"       ),       code = {         testthat::expect_true(TRUE)       }     )   } ) #> Test passed describe(   feature(     title = \"Visualization\",     as_a = \"user\",     i_want = \"to see the changes in the plot\",     so_that = \"I can visualize the impact of my customizations\"   ),   code = {     it(       scenario(         title = \"Viewing the Data Visualization\",         given = \"I have launched the application\",         and = \"it contains movie review data from IMDB and Rotten Tomatoes\",         when = \"I interact with the sidebar controls\",         then = \"the graph should update with the selected options\"       ),       code = {         testthat::expect_true(TRUE)       }     )   } ) #> Test passed describe(   feature(     title = \"Visualization\",     as_a = \"user\",     i_want = \"to see the changes in the plot\",     so_that = \"I can visualize the impact of my customizations\"   ),   code = {     it(       scenario(         title = \"Viewing the Data Visualization\",         given = \"I have launched the application\",         and = list(           \"it contains movie review data from IMDB and Rotten Tomatoes\",           \"the data contains variables like 'Critics Score' and 'MPAA'\"         ),         when = \"I interact with the sidebar controls\",         then = \"the graph should update with the selected options\"       ),       code = {         testthat::expect_true(TRUE)       }     )   } ) #> Test passed"},{"path":"https://mjfrigaard.github.io/bddR/reference/background.html","id":null,"dir":"Reference","previous_headings":"","what":"BDD background — background","title":"BDD background — background","text":"BDD backgrounds listed first scenario(), level indentation.","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/background.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BDD background — background","text":"","code":"background(title, given, ...)"},{"path":"https://mjfrigaard.github.io/bddR/reference/background.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BDD background — background","text":"title Background title given Preconditions scenario/feature. ... additional arguments initial context (provided list())","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/background.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"BDD background — background","text":"BDD scenario","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/background.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"BDD background — background","text":"","code":"background(title = \"Launching the application\",            given = \"I have launched the application\") #> Background: Launching the application #>   Given I have launched the application background(title = \"Launching the application\",            given = \"I have launched the application\",            and = \"it contains movie review data from IMDB and Rotten Tomatoes\") #> Background: Launching the application #>   Given I have launched the application #>   And it contains movie review data from IMDB and Rotten Tomatoes background(title = \"Launching the application\",            given = \"I have launched the application\",            and = list(\"it contains movie review data from IMDB and Rotten Tomatoes\",                       \"the data contains variables like 'Critics Score' and 'MPAA'\",                       \"the data contains variables like 'Audience Score' and 'Genre'\")) #> Background: Launching the application #>   Given I have launched the application #>   And it contains movie review data from IMDB and Rotten Tomatoes #>   And the data contains variables like 'Critics Score' and 'MPAA' #>   And the data contains variables like 'Audience Score' and 'Genre' #>"},{"path":"https://mjfrigaard.github.io/bddR/reference/background_build.html","id":null,"dir":"Reference","previous_headings":"","what":"BDD background (build) — background_build","title":"BDD background (build) — background_build","text":"BDD backgrounds listed first scenario(), level indentation.","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/background_build.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BDD background (build) — background_build","text":"","code":"background_build(title, given, and = NULL)"},{"path":"https://mjfrigaard.github.io/bddR/reference/background_build.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BDD background (build) — background_build","text":"title Background title given Preconditions/initial context Additional '' arguments","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/background_build.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"BDD background (build) — background_build","text":"BDD background","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/bundle.html","id":null,"dir":"Reference","previous_headings":"","what":"Bundle BDD functions — bundle","title":"Bundle BDD functions — bundle","text":"Bundle BDD functions","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/bundle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bundle BDD functions — bundle","text":"","code":"bundle(...)"},{"path":"https://mjfrigaard.github.io/bddR/reference/bundle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bundle BDD functions — bundle","text":"... features, scenarios, background, etc.","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/bundle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bundle BDD functions — bundle","text":"glue/character","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/bundle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bundle BDD functions — bundle","text":"","code":"bundle(   list(   feature(title = \"Visualization\",           as_a = \"user\",           i_want = \"to see the changes in the plot\",           so_that = \"I can visualize the impact of my customizations\"),   background(title = \"Launching the application\",              given = \"I have launched the application\",              and = \"it contains movie review data from IMDB and Rotten Tomatoes\"),   scenario(title = \"Viewing the Data Visualization\",            given = \"I have launched the application\",            when = \"I interact with the sidebar controls\",            then = \"the graph should update with the selected options\")   ) ) #> list(\"Feature: Visualization\\n  As a user\\n  I want to see the changes in the plot\\n  So that I can visualize the impact of my customizations\", \"Background: Launching the application\\n  Given I have launched the application\\n  And it contains movie review data from IMDB and Rotten Tomatoes\", \"Scenario: Viewing the Data Visualization\\n  Given I have launched the application\\n  When I interact with the sidebar controls\\n  Then the graph should update with the selected options\")"},{"path":"https://mjfrigaard.github.io/bddR/reference/check_string.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for string (rlang util) — check_string","title":"Check for string (rlang util) — check_string","text":"Check string (rlang util)","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/check_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for string (rlang util) — check_string","text":"","code":"check_string(x)"},{"path":"https://mjfrigaard.github.io/bddR/reference/check_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for string (rlang util) — check_string","text":"x input argument","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/check_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for string (rlang util) — check_string","text":"invisible passes, alert fails","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/check_string.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for string (rlang util) — check_string","text":"","code":"bddR:::check_string(\"test\") bddR:::check_string(1) #> Error in bddR:::check_string(1): Argument is not string!"},{"path":"https://mjfrigaard.github.io/bddR/reference/collapse_transformer.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse transformer (utility function) — collapse_transformer","title":"Collapse transformer (utility function) — collapse_transformer","text":"transformer automatically collapses glue block ending +","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/collapse_transformer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse transformer (utility function) — collapse_transformer","text":"","code":"collapse_transformer(regex = \"[+]$\", ...)"},{"path":"https://mjfrigaard.github.io/bddR/reference/collapse_transformer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse transformer (utility function) — collapse_transformer","text":"regex regular expression ... arguments passed glue_collapse()","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/collapse_transformer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse transformer (utility function) — collapse_transformer","text":"transformed string","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/collapse_transformer.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Collapse transformer (utility function) — collapse_transformer","text":"function comes glue website","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/collapse_transformer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collapse transformer (utility function) — collapse_transformer","text":"","code":"glue::glue(\"{1:5+}\\n{letters[1:5]+}\",            .transformer = collapse_transformer(sep = \", \")) #> 1, 2, 3, 4, 5 #> a, b, c, d, e glue::glue(\"{1:5+}\\n{letters[1:5]+}\",            .transformer = collapse_transformer(sep = \", \", last = \" and \")) #> 1, 2, 3, 4 and 5 #> a, b, c, d and e x <- c(\"one\", \"two\") glue::glue(\"{x}: {1:5+}\",            .transformer = collapse_transformer(sep = \", \")) #> one: 1, 2, 3, 4, 5 #> two: 1, 2, 3, 4, 5"},{"path":"https://mjfrigaard.github.io/bddR/reference/feature.html","id":null,"dir":"Reference","previous_headings":"","what":"BDD Feature — feature","title":"BDD Feature — feature","text":"BDD Feature","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/feature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BDD Feature — feature","text":"","code":"feature(title, as_a, i_want, so_that)"},{"path":"https://mjfrigaard.github.io/bddR/reference/feature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BDD Feature — feature","text":"title Feature title as_a \"\" i_want \"want \" so_that \"\"","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/feature.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"BDD Feature — feature","text":"feature (based Gherkin syntax)","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/feature.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"BDD Feature — feature","text":"","code":"feature(title = \"Visualization\",         as_a = \"user\",         i_want = \"to see the changes in the plot\",         so_that = \"I can visualize the impact of my customizations\") #> Feature: Visualization #>   As a user #>   I want to see the changes in the plot #>   So that I can visualize the impact of my customizations"},{"path":"https://mjfrigaard.github.io/bddR/reference/feature_build.html","id":null,"dir":"Reference","previous_headings":"","what":"BDD Feature (build) — feature_build","title":"BDD Feature (build) — feature_build","text":"BDD Feature (build)","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/feature_build.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BDD Feature (build) — feature_build","text":"","code":"feature_build(title, as_a, i_want, so_that)"},{"path":"https://mjfrigaard.github.io/bddR/reference/feature_build.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BDD Feature (build) — feature_build","text":"title Feature title as_a \"\" <user/stakeholder> i_want \"want\" so_that \"\"","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/feature_build.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"BDD Feature (build) — feature_build","text":"feature (based Gherkin syntax)","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/hello.html","id":null,"dir":"Reference","previous_headings":"","what":"Hello, World! — hello","title":"Hello, World! — hello","text":"Prints 'Hello, world!'.","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/hello.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hello, World! — hello","text":"","code":"hello()"},{"path":"https://mjfrigaard.github.io/bddR/reference/hello.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hello, World! — hello","text":"","code":"hello() #> Error in hello(): could not find function \"hello\""},{"path":"https://mjfrigaard.github.io/bddR/reference/pivot_term_long.html","id":null,"dir":"Reference","previous_headings":"","what":"Pivot a term (sentence) into a data.frame (long) — pivot_term_long","title":"Pivot a term (sentence) into a data.frame (long) — pivot_term_long","text":"Pivot term (sentence) data.frame (long)","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/pivot_term_long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pivot a term (sentence) into a data.frame (long) — pivot_term_long","text":"","code":"pivot_term_long(term, sep = \"[^[:alnum:]]+\")"},{"path":"https://mjfrigaard.github.io/bddR/reference/pivot_term_long.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pivot a term (sentence) into a data.frame (long) — pivot_term_long","text":"term string, term, sentence, etc. sep separator pattern (set \"[^[:alnum:]]+\")","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/pivot_term_long.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pivot a term (sentence) into a data.frame (long) — pivot_term_long","text":"data.frame unique_items term","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/pivot_term_long.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pivot a term (sentence) into a data.frame (long) — pivot_term_long","text":"","code":"pivot_term_long(\"A large size in stockings is hard to sell.\") #>   unique_items                                       term #> 1            A A large size in stockings is hard to sell. #> 2        large                                       <NA> #> 3         size                                       <NA> #> 4           in                                       <NA> #> 5    stockings                                       <NA> #> 6           is                                       <NA> #> 7         hard                                       <NA> #> 8           to                                       <NA> #> 9         sell                                       <NA> pivot_term_long(c(\"A large size in stockings is hard to sell.\", \"The first part of the plan needs changing.\" )) #>    unique_items                                       term #> 1             A A large size in stockings is hard to sell. #> 2         large                                       <NA> #> 3          size                                       <NA> #> 4            in                                       <NA> #> 5     stockings                                       <NA> #> 6            is                                       <NA> #> 7          hard                                       <NA> #> 8            to                                       <NA> #> 9          sell                                       <NA> #> 10          The The first part of the plan needs changing. #> 11        first                                       <NA> #> 12         part                                       <NA> #> 13           of                                       <NA> #> 14          the                                       <NA> #> 15         plan                                       <NA> #> 16        needs                                       <NA> #> 17     changing                                       <NA>"},{"path":"https://mjfrigaard.github.io/bddR/reference/process_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Process names and text in dataset — process_text","title":"Process names and text in dataset — process_text","text":"Process names text dataset","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/process_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process names and text in dataset — process_text","text":"","code":"process_text(raw_data, fct = FALSE)"},{"path":"https://mjfrigaard.github.io/bddR/reference/process_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process names and text in dataset — process_text","text":"fct convert factors lowercase? TRUE, factors returned character .data data.frame, tibble, data.table","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/process_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process names and text in dataset — process_text","text":"processed dataset","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/process_text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process names and text in dataset — process_text","text":"","code":"str(process_text(datasets::CO2)) #> 'data.frame':\t84 obs. of  5 variables: #>  $ plant    : Ord.factor w/ 12 levels \"Qn1\"<\"Qn2\"<\"Qn3\"<..: 1 1 1 1 1 1 1 2 2 2 ... #>  $ type     : Factor w/ 2 levels \"Quebec\",\"Mississippi\": 1 1 1 1 1 1 1 1 1 1 ... #>  $ treatment: Factor w/ 2 levels \"nonchilled\",\"chilled\": 1 1 1 1 1 1 1 1 1 1 ... #>  $ conc     : num  95 175 250 350 500 675 1000 95 175 250 ... #>  $ uptake   : num  16 30.4 34.8 37.2 35.3 39.2 39.7 13.6 27.3 37.1 ... #>  - attr(*, \"formula\")=Class 'formula'  language uptake ~ conc | Plant #>   .. ..- attr(*, \".Environment\")=<environment: R_EmptyEnv>  #>  - attr(*, \"outer\")=Class 'formula'  language ~Treatment * Type #>   .. ..- attr(*, \".Environment\")=<environment: R_EmptyEnv>  #>  - attr(*, \"labels\")=List of 2 #>   ..$ x: chr \"Ambient carbon dioxide concentration\" #>   ..$ y: chr \"CO2 uptake rate\" #>  - attr(*, \"units\")=List of 2 #>   ..$ x: chr \"(uL/L)\" #>   ..$ y: chr \"(umol/m^2 s)\" str(process_text(datasets::CO2, fct = TRUE)) #> 'data.frame':\t84 obs. of  5 variables: #>  $ plant    : chr  \"qn1\" \"qn1\" \"qn1\" \"qn1\" ... #>  $ type     : chr  \"quebec\" \"quebec\" \"quebec\" \"quebec\" ... #>  $ treatment: chr  \"nonchilled\" \"nonchilled\" \"nonchilled\" \"nonchilled\" ... #>  $ conc     : num  95 175 250 350 500 675 1000 95 175 250 ... #>  $ uptake   : num  16 30.4 34.8 37.2 35.3 39.2 39.7 13.6 27.3 37.1 ... #>  - attr(*, \"formula\")=Class 'formula'  language uptake ~ conc | Plant #>   .. ..- attr(*, \".Environment\")=<environment: R_EmptyEnv>  #>  - attr(*, \"outer\")=Class 'formula'  language ~Treatment * Type #>   .. ..- attr(*, \".Environment\")=<environment: R_EmptyEnv>  #>  - attr(*, \"labels\")=List of 2 #>   ..$ x: chr \"Ambient carbon dioxide concentration\" #>   ..$ y: chr \"CO2 uptake rate\" #>  - attr(*, \"units\")=List of 2 #>   ..$ x: chr \"(uL/L)\" #>   ..$ y: chr \"(umol/m^2 s)\""},{"path":"https://mjfrigaard.github.io/bddR/reference/rev_string.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse strings (function for testing) — rev_string","title":"Reverse strings (function for testing) — rev_string","text":"example function testing writing BDD feature, scenarios, background (original code adapted StackOverflow post)","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/rev_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse strings (function for testing) — rev_string","text":"","code":"rev_string(string)"},{"path":"https://mjfrigaard.github.io/bddR/reference/rev_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse strings (function for testing) — rev_string","text":"string string","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/rev_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverse strings (function for testing) — rev_string","text":"reversed string","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/rev_string.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse strings (function for testing) — rev_string","text":"","code":"## NOT RUN # a <- \"StackOverFlow\" # rev_string(a) # a"},{"path":"https://mjfrigaard.github.io/bddR/reference/scenario.html","id":null,"dir":"Reference","previous_headings":"","what":"BDD scenario — scenario","title":"BDD scenario — scenario","text":"Scenarios illustrate concrete example specific behavior.","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/scenario.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BDD scenario — scenario","text":"","code":"scenario(title, given, when, then, ...)"},{"path":"https://mjfrigaard.github.io/bddR/reference/scenario.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BDD scenario — scenario","text":"title Scenario title given Preconditions initial context action occurs expected outcome behavior additional '' arguments","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/scenario.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"BDD scenario — scenario","text":"BDD scenario","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/scenario.html","id":"keywords","dir":"Reference","previous_headings":"","what":"Keywords","title":"BDD scenario — scenario","text":"Scenarios include 'Given', '', '' keywords (sometimes additional '' statements).","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/scenario.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"BDD scenario — scenario","text":"","code":"scenario(title = \"Viewing the Data Visualization\",          given = \"I have launched the application\",          when = \"I interact with the sidebar controls\",          then = \"the graph should update with the selected options\") #> Scenario: Viewing the Data Visualization #>   Given I have launched the application #>   When I interact with the sidebar controls #>   Then the graph should update with the selected options scenario(title = \"Viewing the Data Visualization\",          given = \"I have launched the application\",          and = \"it contains movie review data from IMDB and Rotten Tomatoes\",          when = \"I interact with the sidebar controls\",          then = \"the graph should update with the selected options\") #> Scenario: Viewing the Data Visualization #>   Given I have launched the application #>   When I interact with the sidebar controls #>   And it contains movie review data from IMDB and Rotten Tomatoes #>   Then the graph should update with the selected options scenario(title = \"Viewing the Data Visualization\",          given = \"I have launched the application\",          and = list(\"it contains movie review data from IMDB and Rotten Tomatoes\",                     \"the data contains variables like 'Critics Score' and 'MPAA'\"),          when = \"I interact with the sidebar controls\",          then = \"the graph should update with the selected options\") #> Scenario: Viewing the Data Visualization #>   Given I have launched the application #>   When I interact with the sidebar controls #>   And it contains movie review data from IMDB and Rotten Tomatoes #>   And the data contains variables like 'Critics Score' and 'MPAA' #>   Then the graph should update with the selected options"},{"path":"https://mjfrigaard.github.io/bddR/reference/scenario_build.html","id":null,"dir":"Reference","previous_headings":"","what":"BDD scenario (build) — scenario_build","title":"BDD scenario (build) — scenario_build","text":"BDD scenario (build)","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/scenario_build.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BDD scenario (build) — scenario_build","text":"","code":"scenario_build(title, given, when, then, and = NULL)"},{"path":"https://mjfrigaard.github.io/bddR/reference/scenario_build.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BDD scenario (build) — scenario_build","text":"given initial context action occurs expected outcome behavior additional '' arguments","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/scenario_build.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"BDD scenario (build) — scenario_build","text":"BDD scenario","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/sep_cols_mult.html","id":null,"dir":"Reference","previous_headings":"","what":"Separate column into multiple columns — sep_cols_mult","title":"Separate column into multiple columns — sep_cols_mult","text":"Separate column multiple columns","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/sep_cols_mult.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Separate column into multiple columns — sep_cols_mult","text":"","code":"sep_cols_mult(data, col, pattern = \"[^[:alnum:]]+\", col_prefix = \"col\")"},{"path":"https://mjfrigaard.github.io/bddR/reference/sep_cols_mult.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Separate column into multiple columns — sep_cols_mult","text":"data data.frame tibble col column separate pattern regular expression pattern passed strsplit() col_prefix prefix new columns","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/sep_cols_mult.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Separate column into multiple columns — sep_cols_mult","text":"data.frame split columns","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/sep_cols_mult.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Separate column into multiple columns — sep_cols_mult","text":"","code":"d <- data.frame(value = c(29L, 91L, 39L, 28L, 12L),                 name = c(\"John\", \"John, Jacob\",                          \"John, Jacob, Jingleheimer\",                          \"Jingleheimer, Schmidt\",                          \"JJJ, Schmidt\")) sep_cols_mult(data = d, col = \"name\", col_prefix = \"names\") #>   value                      name      names_1 names_2      names_3 #> 1    29                      John         John    <NA>         <NA> #> 2    91               John, Jacob         John   Jacob         <NA> #> 3    39 John, Jacob, Jingleheimer         John   Jacob Jingleheimer #> 4    28     Jingleheimer, Schmidt Jingleheimer Schmidt         <NA> #> 5    12              JJJ, Schmidt          JJJ Schmidt         <NA>"},{"path":"https://mjfrigaard.github.io/bddR/reference/with_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Add table Gherkin sytax — with_table","title":"Add table Gherkin sytax — with_table","text":"Add table Gherkin sytax","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/with_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add table Gherkin sytax — with_table","text":"","code":"with_table(tbl)"},{"path":"https://mjfrigaard.github.io/bddR/reference/with_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add table Gherkin sytax — with_table","text":"tbl data.frame tibble","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/with_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add table Gherkin sytax — with_table","text":"table knitr::kable(format = \"pipe\", align = \"l\")","code":""},{"path":"https://mjfrigaard.github.io/bddR/reference/with_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add table Gherkin sytax — with_table","text":"","code":"# with_table(data.frame(value = c(29L, 91L, 39L, 28L, 12L), #                       name = c(\"John\", \"John, Jacob\", #                                \"John, Jacob, Jingleheimer\", #                                \"Jingleheimer, Schmidt\", #                                \"JJJ, Schmidt\")))"}]
